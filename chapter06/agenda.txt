A function that takes a function as parameters or returns a function is a higher order function. Higher order functions are really the essence of functional programming

Curried functions
=================

Every function takes ONLY 1 PARAMETER
Functions that take more than one do so using a clever trick - Curried Functions
Named after Haskell Curry
max 4 5 is really just (max 4) 5
Use t: to see for yourself
	eg. max :: (Ord a) => a -> a -> a 
	    is really just
	    max :: (Ord a) => a -> (a -> a)
Partially applied functions are returned when we call a function with too few parameters.
	- They take as many parameters as we left out 
Think of functions as tiny factories 
	- take materials and product something
	- that something can be another smaller factory
	- Google "How I taught my kids functional programming" for a funny Dr Seuss/Sneechers example
		- http://jackcoughonsoftware.blogspot.com/2009/05/teaching-functional-programming-to-kids.html

SECTIONS

Partial application for infix functions
To section an infix function surround with parentheses and supply parameter on one side only
What out for negative
	- (-4) is not sectioned - it's negative 4
	- Use "subtract" function instead if you want to do this

PRINTING FUNCTIONS

You can't print partially applied function as they aren't instances of the Show type class. Kind of obvious really! 

Some higher-orderism is in order
================================

applyTwice :: (a -> a) -> a -> a
	- Need parenthesis as -> is right associative
We now know that multiple parameters is a trick - but book will still call it that.

ZIPWITH

Note - lists don't have to be of the same type, the function just has to handle those types that's all.... nice.

FLIP

The Functional Programmerâ€™s Toolbox
===================================

MAP

Should be quite familiar - version in groovy, ruby, python etc.
Applies function to every element in list
	map :: (a -> b) -> [a] -> [b]
Can be achieved with list comprehension but map function makes for better readability (especially when nested)

FILTER

Similar to map but takes a predicate (a function that tells if something is true or false) and returns members of list that satisy it
	filter :: (a -> Bool) -> [a] -> [a]
Same as map - can be written as list comprehension. Which to pick? - all about readability
Filter in quicksort example 

MORE EXAMPLES OF MAP AND FILTER

Use filter with head to extract max 
	lazyness means it doesn't have to filter the whole list so not a bad solution.
Collatz chain example
	
MAPPING FUNCTIONS WITH MULTIPLE PARAMETERS

note: !! is for accessing list items (can't believe I didn't know that!)

Lambdas
=======

Lambdas are pretty straightforward - they are just anonymous, use-once functions. 
Usually create them to pass to a higher-order function.
Write a "\" to start a lambda, then func params, then -> then body
Usually surround in parens
eg: (\xs -> length xs > 15)
map (+3) [1,6,3,2] == map (\x -> x + 3) [1,6,3,2]
Can take any number of params
Can pattern match, but only one pattern
Can define functions as lambdas - sometimes they are more readable this way (eg. flip)
	- explicit partial application

Only folds and horses
=====================

I FOLD YOU SO

Folds reduce a data structure to a single value
Takes 3 params
	- Binary Function (2 params)
	- Starting Value/Accumulator
	- Data Structure
Left or Right

LEFT FOLDS WITH FOLDL

Folds up from the left side
sum' xs = foldl (\acc x -> acc + x) 0 xs
using currying:
sum' xs = foldl (+) 0 xs (book used point-free but we haven't got to that yet!)

RIGHT FOLDS WITH FOLDR

Same as foldl but works from the right
Can implement map with foldr:
	map' f xs = foldr (\x acc -> f x : acc) [] xs
Works much better with a foldr as you can use : instead of ++ (which is slow)
Works on infinite lists - foldl doesn't.
Accumulators can be anything!


THE FOLDL1 AND FOLDR1 FUNCTIONS (note typo in title in the book)

Same as regular fold except don't need to seed the accumulator (equal to starting element)
maximum x = foldl1 max x
Be careful as they cause runtime exceptions on empty lists (foldr and foldl just fine though)

SOME FOLD EXAMPLES

reverse
	reverse' = foldl (\acc x -> x : acc) []
	reverse' = foldl (flip (:)) []
product
	product' = foldl (*) 1
filter
	filter' p = foldr (\x acc -> if p x then x : acc else acc) []
last
	last' = foldl1 (\_ x -> x)

ANOTHER WAY TO LOOK AT FOLDS

You can write them out as successive function applications

FOLDING INFINITE LISTS

Above helps to understand foldr and infinite lists

SCANS

Same as folds but report their interim values of accumulator as a list.	
"1" versions work just like folds
scanl - final result in last element
scanr - final result in head
Good for monitoring progress of fold

Function application with $
===========================

$ has lowest precendence of all
Makes things right associative
Can imagine $ as almost being the equivalent of writing an opening parenthesis and then writing a closing parenthesis on the far right side of the expression.

Function composition
====================

Calling one function with a value then calling another function passing the result as the param
Use . function
(.) :: (b -> c) -> (a -> b) -> a -> c
Kind of like a Unix pipe, but works from the right to left
good alternative to lambdas
Makes for tidier code

FUNCTION COMPOSITION WITH MULTIPLE PARAMETERS

Must partially apply them so that so each function takes just 1 param
Note: (sum . replicate 5) max 6.7 8.9 doesn't compile. Had to do (sum . replicate 5) (max 6.7 8.9)
If expression ends with n ')' chances are you are going to end up with n-1 composition operators

POINT-FREE STYLE

Has been used earlier in the book, but not introduced until now
Makes code shorter (but is it more readable??) by dropping params on each side (kind of like reducing equations)
Can't drop them if the param is in parentheses
	- rewrite the expression using function composition and you sometimes can though
	(probably the reason this is at the end of the chapter)
Complex functions - can be less readable. Better style is to use let or split the problem up.
Check out "pointfree" (cabal install pointfree) - shows you how to write expression in point free syntax	

