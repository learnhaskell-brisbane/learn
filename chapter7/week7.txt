A module is a file of functions, types and type classes.  A program is a collection of modules.  A module exports functions and types.

import ModuleName

Search for Haskell libraries with Hoogle http://www.haskell.org/hoogle/

:m + Data.List Data.Map Data.Set - to add the modules List, Map, Set.

Question 1

Hide foldr and foldl.

Answer 1

import Prelude hiding (foldr, foldl)
...

Question 2

What is the standard directory structure for a Haskell project?

Answer 2

Standard Directory structure for Hasekll project:
http://www.haskell.org/haskellwiki/Structure_of_a_Haskell_project#Directory_Structure

Cabal create

Question 3

Use TableType instead of Table.

Run the function 'l16' to print out:

[1]:selectf (borrower)
---------------------
|cstmr-name|loan-num|
---------------------
|Adams     |L-16    |
---------------------

You have a file week7.hs:

import RelationalAlgebra

borrower = Table 
	"borrower" 
	[ "cstmr-name", "loan-num" ] 
	[ ["Adams" , "L-16" ] 
	, ["Curry" , "L-93" ] 
	, ["Hayes" , "L-15" ] 
	, ["Jackson" , "L-14" ] 
	, ["Jones" , "L-17" ] 
	, ["Smith" , "L-11" ] 
	, ["Smith" , "L-23" ] 
	, ["Williams" , "L-17" ] ]
	
l16 = printTable (selectf "loan-num" (== "L-16") borrower)

Complete the following module (RelationalAlgrebra.hs) by completing the export specification which includes a data type constructor and any methods.

As well as:
* Any imports,
* Types:
 * Records are Arrays of Record
 * Record are Arrays of Value
 * Schema are Arrays of Fields
 * Value, Field and Name are Strings 
* The datatype Table deriving Eq and Show and made of a Name, a Schema and Records.
* Any methods required by week7.hs.

Here are the functions implemented in RelationalAlgrebra.hs:

ixOfStr :: (Eq a, Num b) => [a] -> a -> b
ixOfStr lyst str = ixs' 0 lyst str where 
	ixs' i [] s = -1 
	ixs' i (z:zs) s 
		| (s == z) = i 
		| otherwise = ixs' (i+1) zs s

selectf :: Field -> (Value -> Bool) -> Table -> Table 
selectf field pred (Table n s v) = 
	if (i == (-1)) then (Table nn [] [[]]) 
	else Table nn s (filter (\z -> (pred (z !! i))) v)
	where 
		i = ixOfStr s field 
		nn = ("selectf (" ++ n ++ ")") 

maxWidths :: Table -> [Int]
maxWidths t@(Table n s v) = 
	maxWidths' ((fieldNameWidths t) : (columnWidths t)) where 
		maxWidths' :: [[Int]] -> [Int] 
		maxWidths' [] = [] 
		maxWidths' [una] = una
		maxWidths' (una:mas) = zipWith max una (maxWidths' mas) 
		columnWidths (Table n s v) = map (map length) v 
		fieldNameWidths (Table n s v) = map length s

showTable :: Table -> [Char]	
showTable t@(Table n s v) = 
	newline 
		++ "[" ++ show cd ++ "]:" ++ n ++ newline
		++ br 
		++ formedLine ms s ++ newline 
		++ br 
		++ concat (map (\s -> formedLine ms s ++ newline) v) 
		++ br 
		where 
			ms = maxWidths t
			ss = sum ms + 1 + length ms
			br = nChars '-' ss ++ newline
			cd = length v
			formedLine lengs stufs = 
				"|" ++ (concat 
				(zipWith (\l s -> capped (strRtPaddedTo l s)) lengs stufs))
			strRtPaddedTo n str = let ln = length str in 
				if (n >= ln) then str ++ nSpaces (n - ln) 
				else take n str
			nSpaces = nChars ' '
			nChars :: Char -> Int -> [Char] 
			nChars = flip replicate
			capped str = str ++ "|"

newline :: [Char]
newline = ['\r', '\n']

printTable :: Table -> IO()
printTable = putStr . showTable
